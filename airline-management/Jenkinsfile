pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'maven:3.8.4-openjdk-17'
        // TODO: Replace this with your EC2 instance's public DNS name from AWS Console
        // Go to EC2 Dashboard -> Instances -> Select your instance -> Look for "Public IPv4 DNS"
        AWS_EC2_HOST = 'ec2-xx-xx-xx-xx.compute-1.amazonaws.com'  // Replace with your actual EC2 public DNS
        AWS_EC2_USER = 'ec2-user'
        AWS_EC2_KEY = credentials('ec2-key')
        JAR_FILE = 'target/airline-management-0.0.1-SNAPSHOT.jar'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            agent {
                docker {
                    image "${DOCKER_IMAGE}"
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }
        
        stage('Test') {
            agent {
                docker {
                    image "${DOCKER_IMAGE}"
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Deploy to EC2') {
            steps {
                script {
                    // Copy JAR to EC2
                    sh "scp -i ${AWS_EC2_KEY} ${JAR_FILE} ${AWS_EC2_USER}@${AWS_EC2_HOST}:~/"
                    
                    // SSH into EC2 and start the application
                    sh """
                        ssh -i ${AWS_EC2_KEY} ${AWS_EC2_USER}@${AWS_EC2_HOST} '
                            # Kill any existing process using port 8080
                            fuser -k 8080/tcp || true
                            
                            # Start the application
                            nohup java -jar ~/airline-management-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
                            
                            # Wait for application to start
                            sleep 30
                            
                            # Check if application is running
                            curl -f http://localhost:8080/actuator/health || exit 1
                        '
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
} 