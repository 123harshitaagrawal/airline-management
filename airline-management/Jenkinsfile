pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-2'
        EC2_HOST = '3.15.235.93'
        EC2_USER = 'ec2-user'
        SSH_KEY = credentials('ec2-ssh-key')
        JAR_NAME = 'airline-management-0.0.1-SNAPSHOT.jar'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/123harshitaagrawal/airline-management'
            }
        }
        stage('Build') {
            steps {
                script {
                    def mavenImage = docker.image('maven:3.8.6-openjdk-17')
                    mavenImage.inside('-v $HOME/.m2:/root/.m2') {
                        bat 'mvn clean package -DskipTests'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    def mavenImage = docker.image('maven:3.8.6-openjdk-17')
                    mavenImage.inside('-v $HOME/.m2:/root/.m2') {
                        bat 'mvn test'
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    bat """
                        scp -o StrictHostKeyChecking=no target/${env.JAR_NAME} ${env.EC2_USER}@${env.EC2_HOST}:/home/${env.EC2_USER}/app/app.jar
                    """
                }
            }
        }
        stage('Start Application') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    bat """
                        ssh -o StrictHostKeyChecking=no ${env.EC2_USER}@${env.EC2_HOST} "pkill -f \\"java -jar\\" || true && nohup java -jar /home/${env.EC2_USER}/app/app.jar &"
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}